// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mentorshippkg "github.com/Amaankaa/Blog-Starter-Project/Domain/mentorship"
	mock "github.com/stretchr/testify/mock"
)

// IMentorshipRepository is an autogenerated mock type for the IMentorshipRepository type
type IMentorshipRepository struct {
	mock.Mock
}

// CreateConnection provides a mock function with given fields: ctx, connection
func (_m *IMentorshipRepository) CreateConnection(ctx context.Context, connection mentorshippkg.MentorshipConnection) (mentorshippkg.MentorshipConnection, error) {
	ret := _m.Called(ctx, connection)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnection")
	}

	var r0 mentorshippkg.MentorshipConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mentorshippkg.MentorshipConnection) (mentorshippkg.MentorshipConnection, error)); ok {
		return rf(ctx, connection)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mentorshippkg.MentorshipConnection) mentorshippkg.MentorshipConnection); ok {
		r0 = rf(ctx, connection)
	} else {
		r0 = ret.Get(0).(mentorshippkg.MentorshipConnection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mentorshippkg.MentorshipConnection) error); ok {
		r1 = rf(ctx, connection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRequest provides a mock function with given fields: ctx, request
func (_m *IMentorshipRepository) CreateRequest(ctx context.Context, request mentorshippkg.MentorshipRequest) (mentorshippkg.MentorshipRequest, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateRequest")
	}

	var r0 mentorshippkg.MentorshipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mentorshippkg.MentorshipRequest) (mentorshippkg.MentorshipRequest, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mentorshippkg.MentorshipRequest) mentorshippkg.MentorshipRequest); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(mentorshippkg.MentorshipRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, mentorshippkg.MentorshipRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRequest provides a mock function with given fields: ctx, requestID
func (_m *IMentorshipRepository) DeleteRequest(ctx context.Context, requestID string) error {
	ret := _m.Called(ctx, requestID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, requestID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndConnection provides a mock function with given fields: ctx, connectionID, endReason, rating, feedback, endedByMentor
func (_m *IMentorshipRepository) EndConnection(ctx context.Context, connectionID string, endReason string, rating *int, feedback string, endedByMentor bool) error {
	ret := _m.Called(ctx, connectionID, endReason, rating, feedback, endedByMentor)

	if len(ret) == 0 {
		panic("no return value specified for EndConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *int, string, bool) error); ok {
		r0 = rf(ctx, connectionID, endReason, rating, feedback, endedByMentor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExistsPendingRequest provides a mock function with given fields: ctx, menteeID, mentorID
func (_m *IMentorshipRepository) ExistsPendingRequest(ctx context.Context, menteeID string, mentorID string) (bool, error) {
	ret := _m.Called(ctx, menteeID, mentorID)

	if len(ret) == 0 {
		panic("no return value specified for ExistsPendingRequest")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, menteeID, mentorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, menteeID, mentorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, menteeID, mentorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveConnectionsByUser provides a mock function with given fields: ctx, userID
func (_m *IMentorshipRepository) GetActiveConnectionsByUser(ctx context.Context, userID string) ([]mentorshippkg.MentorshipConnection, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveConnectionsByUser")
	}

	var r0 []mentorshippkg.MentorshipConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]mentorshippkg.MentorshipConnection, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []mentorshippkg.MentorshipConnection); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionByID provides a mock function with given fields: ctx, connectionID
func (_m *IMentorshipRepository) GetConnectionByID(ctx context.Context, connectionID string) (mentorshippkg.MentorshipConnection, error) {
	ret := _m.Called(ctx, connectionID)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionByID")
	}

	var r0 mentorshippkg.MentorshipConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (mentorshippkg.MentorshipConnection, error)); ok {
		return rf(ctx, connectionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) mentorshippkg.MentorshipConnection); ok {
		r0 = rf(ctx, connectionID)
	} else {
		r0 = ret.Get(0).(mentorshippkg.MentorshipConnection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, connectionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionByRequestID provides a mock function with given fields: ctx, requestID
func (_m *IMentorshipRepository) GetConnectionByRequestID(ctx context.Context, requestID string) (mentorshippkg.MentorshipConnection, error) {
	ret := _m.Called(ctx, requestID)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionByRequestID")
	}

	var r0 mentorshippkg.MentorshipConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (mentorshippkg.MentorshipConnection, error)); ok {
		return rf(ctx, requestID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) mentorshippkg.MentorshipConnection); ok {
		r0 = rf(ctx, requestID)
	} else {
		r0 = ret.Get(0).(mentorshippkg.MentorshipConnection)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionsByMentee provides a mock function with given fields: ctx, menteeID, limit, offset
func (_m *IMentorshipRepository) GetConnectionsByMentee(ctx context.Context, menteeID string, limit int, offset int) ([]mentorshippkg.MentorshipConnection, error) {
	ret := _m.Called(ctx, menteeID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionsByMentee")
	}

	var r0 []mentorshippkg.MentorshipConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]mentorshippkg.MentorshipConnection, error)); ok {
		return rf(ctx, menteeID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []mentorshippkg.MentorshipConnection); ok {
		r0 = rf(ctx, menteeID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, menteeID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionsByMentor provides a mock function with given fields: ctx, mentorID, limit, offset
func (_m *IMentorshipRepository) GetConnectionsByMentor(ctx context.Context, mentorID string, limit int, offset int) ([]mentorshippkg.MentorshipConnection, error) {
	ret := _m.Called(ctx, mentorID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectionsByMentor")
	}

	var r0 []mentorshippkg.MentorshipConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]mentorshippkg.MentorshipConnection, error)); ok {
		return rf(ctx, mentorID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []mentorshippkg.MentorshipConnection); ok {
		r0 = rf(ctx, mentorID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, mentorID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMentorshipStats provides a mock function with given fields: ctx, userID
func (_m *IMentorshipRepository) GetMentorshipStats(ctx context.Context, userID string) (mentorshippkg.MentorshipStats, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMentorshipStats")
	}

	var r0 mentorshippkg.MentorshipStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (mentorshippkg.MentorshipStats, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) mentorshippkg.MentorshipStats); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(mentorshippkg.MentorshipStats)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPendingRequestsByMentor provides a mock function with given fields: ctx, mentorID, limit, offset
func (_m *IMentorshipRepository) GetPendingRequestsByMentor(ctx context.Context, mentorID string, limit int, offset int) ([]mentorshippkg.MentorshipRequest, error) {
	ret := _m.Called(ctx, mentorID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetPendingRequestsByMentor")
	}

	var r0 []mentorshippkg.MentorshipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]mentorshippkg.MentorshipRequest, error)); ok {
		return rf(ctx, mentorID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []mentorshippkg.MentorshipRequest); ok {
		r0 = rf(ctx, mentorID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, mentorID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequestByID provides a mock function with given fields: ctx, requestID
func (_m *IMentorshipRepository) GetRequestByID(ctx context.Context, requestID string) (mentorshippkg.MentorshipRequest, error) {
	ret := _m.Called(ctx, requestID)

	if len(ret) == 0 {
		panic("no return value specified for GetRequestByID")
	}

	var r0 mentorshippkg.MentorshipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (mentorshippkg.MentorshipRequest, error)); ok {
		return rf(ctx, requestID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) mentorshippkg.MentorshipRequest); ok {
		r0 = rf(ctx, requestID)
	} else {
		r0 = ret.Get(0).(mentorshippkg.MentorshipRequest)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, requestID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequestsByMentee provides a mock function with given fields: ctx, menteeID, limit, offset
func (_m *IMentorshipRepository) GetRequestsByMentee(ctx context.Context, menteeID string, limit int, offset int) ([]mentorshippkg.MentorshipRequest, error) {
	ret := _m.Called(ctx, menteeID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetRequestsByMentee")
	}

	var r0 []mentorshippkg.MentorshipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]mentorshippkg.MentorshipRequest, error)); ok {
		return rf(ctx, menteeID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []mentorshippkg.MentorshipRequest); ok {
		r0 = rf(ctx, menteeID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, menteeID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequestsByMentor provides a mock function with given fields: ctx, mentorID, limit, offset
func (_m *IMentorshipRepository) GetRequestsByMentor(ctx context.Context, mentorID string, limit int, offset int) ([]mentorshippkg.MentorshipRequest, error) {
	ret := _m.Called(ctx, mentorID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetRequestsByMentor")
	}

	var r0 []mentorshippkg.MentorshipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]mentorshippkg.MentorshipRequest, error)); ok {
		return rf(ctx, mentorID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []mentorshippkg.MentorshipRequest); ok {
		r0 = rf(ctx, mentorID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, mentorID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchConnections provides a mock function with given fields: ctx, filters
func (_m *IMentorshipRepository) SearchConnections(ctx context.Context, filters mentorshippkg.ConnectionFilters) ([]mentorshippkg.MentorshipConnection, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for SearchConnections")
	}

	var r0 []mentorshippkg.MentorshipConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mentorshippkg.ConnectionFilters) ([]mentorshippkg.MentorshipConnection, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mentorshippkg.ConnectionFilters) []mentorshippkg.MentorshipConnection); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, mentorshippkg.ConnectionFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchRequests provides a mock function with given fields: ctx, filters
func (_m *IMentorshipRepository) SearchRequests(ctx context.Context, filters mentorshippkg.RequestFilters) ([]mentorshippkg.MentorshipRequest, error) {
	ret := _m.Called(ctx, filters)

	if len(ret) == 0 {
		panic("no return value specified for SearchRequests")
	}

	var r0 []mentorshippkg.MentorshipRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, mentorshippkg.RequestFilters) ([]mentorshippkg.MentorshipRequest, error)); ok {
		return rf(ctx, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, mentorshippkg.RequestFilters) []mentorshippkg.MentorshipRequest); ok {
		r0 = rf(ctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, mentorshippkg.RequestFilters) error); ok {
		r1 = rf(ctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnectionStatus provides a mock function with given fields: ctx, connectionID, status
func (_m *IMentorshipRepository) UpdateConnectionStatus(ctx context.Context, connectionID string, status mentorshippkg.MentorshipConnectionStatus) error {
	ret := _m.Called(ctx, connectionID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectionStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, mentorshippkg.MentorshipConnectionStatus) error); ok {
		r0 = rf(ctx, connectionID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLastInteraction provides a mock function with given fields: ctx, connectionID
func (_m *IMentorshipRepository) UpdateLastInteraction(ctx context.Context, connectionID string) error {
	ret := _m.Called(ctx, connectionID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastInteraction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, connectionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRequestStatus provides a mock function with given fields: ctx, requestID, status
func (_m *IMentorshipRepository) UpdateRequestStatus(ctx context.Context, requestID string, status mentorshippkg.MentorshipRequestStatus) error {
	ret := _m.Called(ctx, requestID, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRequestStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, mentorshippkg.MentorshipRequestStatus) error); ok {
		r0 = rf(ctx, requestID, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIMentorshipRepository creates a new instance of IMentorshipRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMentorshipRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMentorshipRepository {
	mock := &IMentorshipRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
