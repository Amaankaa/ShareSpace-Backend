// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mentorshippkg "github.com/Amaankaa/Blog-Starter-Project/Domain/mentorship"
	mock "github.com/stretchr/testify/mock"
)

// IMentorshipUsecase is an autogenerated mock type for the IMentorshipUsecase type
type IMentorshipUsecase struct {
	mock.Mock
}

// CanSendRequest provides a mock function with given fields: ctx, menteeID, mentorID
func (_m *IMentorshipUsecase) CanSendRequest(ctx context.Context, menteeID string, mentorID string) error {
	ret := _m.Called(ctx, menteeID, mentorID)

	if len(ret) == 0 {
		panic("no return value specified for CanSendRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, menteeID, mentorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CancelRequest provides a mock function with given fields: ctx, requestID, userID
func (_m *IMentorshipUsecase) CancelRequest(ctx context.Context, requestID string, userID string) error {
	ret := _m.Called(ctx, requestID, userID)

	if len(ret) == 0 {
		panic("no return value specified for CancelRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, requestID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndConnection provides a mock function with given fields: ctx, connectionID, userID, endData
func (_m *IMentorshipUsecase) EndConnection(ctx context.Context, connectionID string, userID string, endData mentorshippkg.EndConnectionDTO) error {
	ret := _m.Called(ctx, connectionID, userID, endData)

	if len(ret) == 0 {
		panic("no return value specified for EndConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, mentorshippkg.EndConnectionDTO) error); ok {
		r0 = rf(ctx, connectionID, userID, endData)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActiveConnections provides a mock function with given fields: ctx, userID
func (_m *IMentorshipUsecase) GetActiveConnections(ctx context.Context, userID string) ([]mentorshippkg.MentorshipConnectionResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveConnections")
	}

	var r0 []mentorshippkg.MentorshipConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]mentorshippkg.MentorshipConnectionResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []mentorshippkg.MentorshipConnectionResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIncomingRequests provides a mock function with given fields: ctx, mentorID, limit, offset
func (_m *IMentorshipUsecase) GetIncomingRequests(ctx context.Context, mentorID string, limit int, offset int) ([]mentorshippkg.MentorshipRequestResponse, error) {
	ret := _m.Called(ctx, mentorID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetIncomingRequests")
	}

	var r0 []mentorshippkg.MentorshipRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]mentorshippkg.MentorshipRequestResponse, error)); ok {
		return rf(ctx, mentorID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []mentorshippkg.MentorshipRequestResponse); ok {
		r0 = rf(ctx, mentorID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, mentorID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMentorshipConnection provides a mock function with given fields: ctx, connectionID, userID
func (_m *IMentorshipUsecase) GetMentorshipConnection(ctx context.Context, connectionID string, userID string) (mentorshippkg.MentorshipConnectionResponse, error) {
	ret := _m.Called(ctx, connectionID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMentorshipConnection")
	}

	var r0 mentorshippkg.MentorshipConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (mentorshippkg.MentorshipConnectionResponse, error)); ok {
		return rf(ctx, connectionID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) mentorshippkg.MentorshipConnectionResponse); ok {
		r0 = rf(ctx, connectionID, userID)
	} else {
		r0 = ret.Get(0).(mentorshippkg.MentorshipConnectionResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, connectionID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMentorshipInsights provides a mock function with given fields: ctx, userID
func (_m *IMentorshipUsecase) GetMentorshipInsights(ctx context.Context, userID string) (mentorshippkg.MentorshipInsights, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMentorshipInsights")
	}

	var r0 mentorshippkg.MentorshipInsights
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (mentorshippkg.MentorshipInsights, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) mentorshippkg.MentorshipInsights); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(mentorshippkg.MentorshipInsights)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMentorshipRequest provides a mock function with given fields: ctx, requestID, userID
func (_m *IMentorshipUsecase) GetMentorshipRequest(ctx context.Context, requestID string, userID string) (mentorshippkg.MentorshipRequestResponse, error) {
	ret := _m.Called(ctx, requestID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMentorshipRequest")
	}

	var r0 mentorshippkg.MentorshipRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (mentorshippkg.MentorshipRequestResponse, error)); ok {
		return rf(ctx, requestID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) mentorshippkg.MentorshipRequestResponse); ok {
		r0 = rf(ctx, requestID, userID)
	} else {
		r0 = ret.Get(0).(mentorshippkg.MentorshipRequestResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, requestID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMentorshipStats provides a mock function with given fields: ctx, userID
func (_m *IMentorshipUsecase) GetMentorshipStats(ctx context.Context, userID string) (mentorshippkg.MentorshipStats, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetMentorshipStats")
	}

	var r0 mentorshippkg.MentorshipStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (mentorshippkg.MentorshipStats, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) mentorshippkg.MentorshipStats); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(mentorshippkg.MentorshipStats)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyMenteerships provides a mock function with given fields: ctx, userID, limit, offset
func (_m *IMentorshipUsecase) GetMyMenteerships(ctx context.Context, userID string, limit int, offset int) ([]mentorshippkg.MentorshipConnectionResponse, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetMyMenteerships")
	}

	var r0 []mentorshippkg.MentorshipConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]mentorshippkg.MentorshipConnectionResponse, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []mentorshippkg.MentorshipConnectionResponse); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMyMentorships provides a mock function with given fields: ctx, userID, limit, offset
func (_m *IMentorshipUsecase) GetMyMentorships(ctx context.Context, userID string, limit int, offset int) ([]mentorshippkg.MentorshipConnectionResponse, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetMyMentorships")
	}

	var r0 []mentorshippkg.MentorshipConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]mentorshippkg.MentorshipConnectionResponse, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []mentorshippkg.MentorshipConnectionResponse); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOutgoingRequests provides a mock function with given fields: ctx, menteeID, limit, offset
func (_m *IMentorshipUsecase) GetOutgoingRequests(ctx context.Context, menteeID string, limit int, offset int) ([]mentorshippkg.MentorshipRequestResponse, error) {
	ret := _m.Called(ctx, menteeID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOutgoingRequests")
	}

	var r0 []mentorshippkg.MentorshipRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]mentorshippkg.MentorshipRequestResponse, error)); ok {
		return rf(ctx, menteeID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []mentorshippkg.MentorshipRequestResponse); ok {
		r0 = rf(ctx, menteeID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, menteeID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PauseConnection provides a mock function with given fields: ctx, connectionID, userID
func (_m *IMentorshipUsecase) PauseConnection(ctx context.Context, connectionID string, userID string) error {
	ret := _m.Called(ctx, connectionID, userID)

	if len(ret) == 0 {
		panic("no return value specified for PauseConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, connectionID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RespondToRequest provides a mock function with given fields: ctx, requestID, mentorID, response
func (_m *IMentorshipUsecase) RespondToRequest(ctx context.Context, requestID string, mentorID string, response mentorshippkg.RespondToRequestDTO) (mentorshippkg.MentorshipRequestResponse, error) {
	ret := _m.Called(ctx, requestID, mentorID, response)

	if len(ret) == 0 {
		panic("no return value specified for RespondToRequest")
	}

	var r0 mentorshippkg.MentorshipRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, mentorshippkg.RespondToRequestDTO) (mentorshippkg.MentorshipRequestResponse, error)); ok {
		return rf(ctx, requestID, mentorID, response)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, mentorshippkg.RespondToRequestDTO) mentorshippkg.MentorshipRequestResponse); ok {
		r0 = rf(ctx, requestID, mentorID, response)
	} else {
		r0 = ret.Get(0).(mentorshippkg.MentorshipRequestResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, mentorshippkg.RespondToRequestDTO) error); ok {
		r1 = rf(ctx, requestID, mentorID, response)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeConnection provides a mock function with given fields: ctx, connectionID, userID
func (_m *IMentorshipUsecase) ResumeConnection(ctx context.Context, connectionID string, userID string) error {
	ret := _m.Called(ctx, connectionID, userID)

	if len(ret) == 0 {
		panic("no return value specified for ResumeConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, connectionID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchMentorshipConnections provides a mock function with given fields: ctx, userID, filters
func (_m *IMentorshipUsecase) SearchMentorshipConnections(ctx context.Context, userID string, filters mentorshippkg.ConnectionFilters) ([]mentorshippkg.MentorshipConnectionResponse, error) {
	ret := _m.Called(ctx, userID, filters)

	if len(ret) == 0 {
		panic("no return value specified for SearchMentorshipConnections")
	}

	var r0 []mentorshippkg.MentorshipConnectionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, mentorshippkg.ConnectionFilters) ([]mentorshippkg.MentorshipConnectionResponse, error)); ok {
		return rf(ctx, userID, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, mentorshippkg.ConnectionFilters) []mentorshippkg.MentorshipConnectionResponse); ok {
		r0 = rf(ctx, userID, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, mentorshippkg.ConnectionFilters) error); ok {
		r1 = rf(ctx, userID, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchMentorshipRequests provides a mock function with given fields: ctx, userID, filters
func (_m *IMentorshipUsecase) SearchMentorshipRequests(ctx context.Context, userID string, filters mentorshippkg.RequestFilters) ([]mentorshippkg.MentorshipRequestResponse, error) {
	ret := _m.Called(ctx, userID, filters)

	if len(ret) == 0 {
		panic("no return value specified for SearchMentorshipRequests")
	}

	var r0 []mentorshippkg.MentorshipRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, mentorshippkg.RequestFilters) ([]mentorshippkg.MentorshipRequestResponse, error)); ok {
		return rf(ctx, userID, filters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, mentorshippkg.RequestFilters) []mentorshippkg.MentorshipRequestResponse); ok {
		r0 = rf(ctx, userID, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]mentorshippkg.MentorshipRequestResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, mentorshippkg.RequestFilters) error); ok {
		r1 = rf(ctx, userID, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMentorshipRequest provides a mock function with given fields: ctx, menteeID, request
func (_m *IMentorshipUsecase) SendMentorshipRequest(ctx context.Context, menteeID string, request mentorshippkg.CreateMentorshipRequestDTO) (mentorshippkg.MentorshipRequestResponse, error) {
	ret := _m.Called(ctx, menteeID, request)

	if len(ret) == 0 {
		panic("no return value specified for SendMentorshipRequest")
	}

	var r0 mentorshippkg.MentorshipRequestResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, mentorshippkg.CreateMentorshipRequestDTO) (mentorshippkg.MentorshipRequestResponse, error)); ok {
		return rf(ctx, menteeID, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, mentorshippkg.CreateMentorshipRequestDTO) mentorshippkg.MentorshipRequestResponse); ok {
		r0 = rf(ctx, menteeID, request)
	} else {
		r0 = ret.Get(0).(mentorshippkg.MentorshipRequestResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, mentorshippkg.CreateMentorshipRequestDTO) error); ok {
		r1 = rf(ctx, menteeID, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLastInteraction provides a mock function with given fields: ctx, connectionID, userID
func (_m *IMentorshipUsecase) UpdateLastInteraction(ctx context.Context, connectionID string, userID string) error {
	ret := _m.Called(ctx, connectionID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastInteraction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, connectionID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateConnectionAccess provides a mock function with given fields: ctx, connectionID, userID
func (_m *IMentorshipUsecase) ValidateConnectionAccess(ctx context.Context, connectionID string, userID string) error {
	ret := _m.Called(ctx, connectionID, userID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateConnectionAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, connectionID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateRequestAccess provides a mock function with given fields: ctx, requestID, userID
func (_m *IMentorshipUsecase) ValidateRequestAccess(ctx context.Context, requestID string, userID string) error {
	ret := _m.Called(ctx, requestID, userID)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRequestAccess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, requestID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIMentorshipUsecase creates a new instance of IMentorshipUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMentorshipUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMentorshipUsecase {
	mock := &IMentorshipUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
