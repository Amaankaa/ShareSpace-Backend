// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	userpkg "github.com/Amaankaa/Blog-Starter-Project/Domain/user"
	mock "github.com/stretchr/testify/mock"
)

// IUserRepository is an autogenerated mock type for the IUserRepository type
type IUserRepository struct {
	mock.Mock
}

// CountUsers provides a mock function with given fields: ctx
func (_m *IUserRepository) CountUsers(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountUsers")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *IUserRepository) CreateUser(ctx context.Context, user userpkg.User) (userpkg.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 userpkg.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, userpkg.User) (userpkg.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, userpkg.User) userpkg.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(userpkg.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, userpkg.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsByEmail provides a mock function with given fields: ctx, email
func (_m *IUserRepository) ExistsByEmail(ctx context.Context, email string) (bool, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByEmail")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExistsByUsername provides a mock function with given fields: ctx, username
func (_m *IUserRepository) ExistsByUsername(ctx context.Context, username string) (bool, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for ExistsByUsername")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, userID
func (_m *IUserRepository) FindByID(ctx context.Context, userID string) (userpkg.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 userpkg.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (userpkg.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) userpkg.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(userpkg.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByLogin provides a mock function with given fields: ctx, login
func (_m *IUserRepository) GetUserByLogin(ctx context.Context, login string) (userpkg.User, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByLogin")
	}

	var r0 userpkg.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (userpkg.User, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) userpkg.User); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(userpkg.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfile provides a mock function with given fields: ctx, userID
func (_m *IUserRepository) GetUserProfile(ctx context.Context, userID string) (userpkg.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfile")
	}

	var r0 userpkg.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (userpkg.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) userpkg.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(userpkg.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIsVerifiedByEmail provides a mock function with given fields: ctx, email, verified
func (_m *IUserRepository) UpdateIsVerifiedByEmail(ctx context.Context, email string, verified bool) error {
	ret := _m.Called(ctx, email, verified)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIsVerifiedByEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, email, verified)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePasswordByEmail provides a mock function with given fields: ctx, email, hashedPassword
func (_m *IUserRepository) UpdatePasswordByEmail(ctx context.Context, email string, hashedPassword string) error {
	ret := _m.Called(ctx, email, hashedPassword)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePasswordByEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, hashedPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: ctx, userID, updates
func (_m *IUserRepository) UpdateProfile(ctx context.Context, userID string, updates userpkg.UpdateProfileRequest) (userpkg.User, error) {
	ret := _m.Called(ctx, userID, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 userpkg.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, userpkg.UpdateProfileRequest) (userpkg.User, error)); ok {
		return rf(ctx, userID, updates)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, userpkg.UpdateProfileRequest) userpkg.User); ok {
		r0 = rf(ctx, userID, updates)
	} else {
		r0 = ret.Get(0).(userpkg.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, userpkg.UpdateProfileRequest) error); ok {
		r1 = rf(ctx, userID, updates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserRoleByID provides a mock function with given fields: ctx, userID, role
func (_m *IUserRepository) UpdateUserRoleByID(ctx context.Context, userID string, role string) error {
	ret := _m.Called(ctx, userID, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRoleByID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRoleAndPromoter provides a mock function with given fields: ctx, userID, role, promoterID
func (_m *IUserRepository) UpdateRoleAndPromoter(ctx context.Context, userID string, role string, promoterID *string) error {
	ret := _m.Called(ctx, userID, role, promoterID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleAndPromoter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *string) error); ok {
		r0 = rf(ctx, userID, role, promoterID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserRepository creates a new instance of IUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepository {
	mock := &IUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
