// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	userpkg "github.com/Amaankaa/Blog-Starter-Project/Domain/user"
	mock "github.com/stretchr/testify/mock"
)

// IPasswordResetRepository is an autogenerated mock type for the IPasswordResetRepository type
type IPasswordResetRepository struct {
	mock.Mock
}

// DeleteResetRequest provides a mock function with given fields: ctx, email
func (_m *IPasswordResetRepository) DeleteResetRequest(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResetRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetResetRequest provides a mock function with given fields: ctx, email
func (_m *IPasswordResetRepository) GetResetRequest(ctx context.Context, email string) (userpkg.PasswordReset, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetResetRequest")
	}

	var r0 userpkg.PasswordReset
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (userpkg.PasswordReset, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) userpkg.PasswordReset); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(userpkg.PasswordReset)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementAttemptCount provides a mock function with given fields: ctx, email
func (_m *IPasswordResetRepository) IncrementAttemptCount(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for IncrementAttemptCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreResetRequest provides a mock function with given fields: ctx, reset
func (_m *IPasswordResetRepository) StoreResetRequest(ctx context.Context, reset userpkg.PasswordReset) error {
	ret := _m.Called(ctx, reset)

	if len(ret) == 0 {
		panic("no return value specified for StoreResetRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, userpkg.PasswordReset) error); ok {
		r0 = rf(ctx, reset)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIPasswordResetRepository creates a new instance of IPasswordResetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPasswordResetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPasswordResetRepository {
	mock := &IPasswordResetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
