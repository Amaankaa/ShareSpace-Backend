// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	userpkg "github.com/Amaankaa/Blog-Starter-Project/Domain/user"
	mock "github.com/stretchr/testify/mock"
)

// ITokenRepository is an autogenerated mock type for the ITokenRepository type
type ITokenRepository struct {
	mock.Mock
}

// DeleteByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *ITokenRepository) DeleteByRefreshToken(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTokensByUserID provides a mock function with given fields: ctx, userID
func (_m *ITokenRepository) DeleteTokensByUserID(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTokensByUserID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByRefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *ITokenRepository) FindByRefreshToken(ctx context.Context, refreshToken string) (userpkg.Token, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for FindByRefreshToken")
	}

	var r0 userpkg.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (userpkg.Token, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) userpkg.Token); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(userpkg.Token)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreToken provides a mock function with given fields: ctx, token
func (_m *ITokenRepository) StoreToken(ctx context.Context, token userpkg.Token) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for StoreToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, userpkg.Token) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewITokenRepository creates a new instance of ITokenRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITokenRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITokenRepository {
	mock := &ITokenRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
