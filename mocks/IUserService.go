// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mentorshippkg "github.com/Amaankaa/Blog-Starter-Project/Domain/mentorship"
	mock "github.com/stretchr/testify/mock"

	userpkg "github.com/Amaankaa/Blog-Starter-Project/Domain/user"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// GetPublicProfile provides a mock function with given fields: ctx, userID
func (_m *IUserService) GetPublicProfile(ctx context.Context, userID string) (userpkg.PublicProfile, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicProfile")
	}

	var r0 userpkg.PublicProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (userpkg.PublicProfile, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) userpkg.PublicProfile); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(userpkg.PublicProfile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInfo provides a mock function with given fields: ctx, userID, includePrivateInfo
func (_m *IUserService) GetUserInfo(ctx context.Context, userID string, includePrivateInfo bool) (mentorshippkg.UserInfo, error) {
	ret := _m.Called(ctx, userID, includePrivateInfo)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 mentorshippkg.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (mentorshippkg.UserInfo, error)); ok {
		return rf(ctx, userID, includePrivateInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) mentorshippkg.UserInfo); ok {
		r0 = rf(ctx, userID, includePrivateInfo)
	} else {
		r0 = ret.Get(0).(mentorshippkg.UserInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, userID, includePrivateInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUserAvailableForMentoring provides a mock function with given fields: ctx, userID
func (_m *IUserService) IsUserAvailableForMentoring(ctx context.Context, userID string) (bool, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsUserAvailableForMentoring")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMentorAvailability provides a mock function with given fields: ctx, userID, available
func (_m *IUserService) UpdateMentorAvailability(ctx context.Context, userID string, available bool) error {
	ret := _m.Called(ctx, userID, available)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMentorAvailability")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, userID, available)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
