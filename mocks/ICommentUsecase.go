// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	comment "github.com/Amaankaa/Blog-Starter-Project/Domain/comment"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// ICommentUsecase is an autogenerated mock type for the ICommentUsecase type
type ICommentUsecase struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, postID, req, userID
func (_m *ICommentUsecase) CreateComment(ctx context.Context, postID primitive.ObjectID, req comment.CreateCommentRequest, userID primitive.ObjectID) (*comment.CommentResponse, error) {
	ret := _m.Called(ctx, postID, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *comment.CommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, comment.CreateCommentRequest, primitive.ObjectID) (*comment.CommentResponse, error)); ok {
		return rf(ctx, postID, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, comment.CreateCommentRequest, primitive.ObjectID) *comment.CommentResponse); ok {
		r0 = rf(ctx, postID, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comment.CommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, comment.CreateCommentRequest, primitive.ObjectID) error); ok {
		r1 = rf(ctx, postID, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: ctx, commentID, userID
func (_m *ICommentUsecase) DeleteComment(ctx context.Context, commentID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, commentID, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, commentID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetComments provides a mock function with given fields: ctx, postID, pagination
func (_m *ICommentUsecase) GetComments(ctx context.Context, postID primitive.ObjectID, pagination comment.CommentPagination) (*comment.CommentListResponse, error) {
	ret := _m.Called(ctx, postID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetComments")
	}

	var r0 *comment.CommentListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, comment.CommentPagination) (*comment.CommentListResponse, error)); ok {
		return rf(ctx, postID, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, comment.CommentPagination) *comment.CommentListResponse); ok {
		r0 = rf(ctx, postID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comment.CommentListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, comment.CommentPagination) error); ok {
		r1 = rf(ctx, postID, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComment provides a mock function with given fields: ctx, commentID, req, userID
func (_m *ICommentUsecase) UpdateComment(ctx context.Context, commentID primitive.ObjectID, req comment.UpdateCommentRequest, userID primitive.ObjectID) (*comment.CommentResponse, error) {
	ret := _m.Called(ctx, commentID, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 *comment.CommentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, comment.UpdateCommentRequest, primitive.ObjectID) (*comment.CommentResponse, error)); ok {
		return rf(ctx, commentID, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, comment.UpdateCommentRequest, primitive.ObjectID) *comment.CommentResponse); ok {
		r0 = rf(ctx, commentID, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comment.CommentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, comment.UpdateCommentRequest, primitive.ObjectID) error); ok {
		r1 = rf(ctx, commentID, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICommentUsecase creates a new instance of ICommentUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICommentUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICommentUsecase {
	mock := &ICommentUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
