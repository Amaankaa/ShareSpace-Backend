// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	postpkg "github.com/Amaankaa/Blog-Starter-Project/Domain/post"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// PostRepository is an autogenerated mock type for the PostRepository type
type PostRepository struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: ctx, post
func (_m *PostRepository) CreatePost(ctx context.Context, post postpkg.Post) (*postpkg.Post, error) {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *postpkg.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postpkg.Post) (*postpkg.Post, error)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postpkg.Post) *postpkg.Post); ok {
		r0 = rf(ctx, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, postpkg.Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: ctx, id
func (_m *PostRepository) DeletePost(ctx context.Context, id primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPopularPosts provides a mock function with given fields: ctx, limit, timeframe
func (_m *PostRepository) GetPopularPosts(ctx context.Context, limit int, timeframe string) ([]postpkg.Post, error) {
	ret := _m.Called(ctx, limit, timeframe)

	if len(ret) == 0 {
		panic("no return value specified for GetPopularPosts")
	}

	var r0 []postpkg.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) ([]postpkg.Post, error)); ok {
		return rf(ctx, limit, timeframe)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []postpkg.Post); ok {
		r0 = rf(ctx, limit, timeframe)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postpkg.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, limit, timeframe)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostByID provides a mock function with given fields: ctx, id
func (_m *PostRepository) GetPostByID(ctx context.Context, id primitive.ObjectID) (*postpkg.Post, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 *postpkg.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*postpkg.Post, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *postpkg.Post); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostStats provides a mock function with given fields: ctx, postID
func (_m *PostRepository) GetPostStats(ctx context.Context, postID primitive.ObjectID) (*postpkg.PostStats, error) {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostStats")
	}

	var r0 *postpkg.PostStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*postpkg.PostStats, error)); ok {
		return rf(ctx, postID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *postpkg.PostStats); ok {
		r0 = rf(ctx, postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.PostStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPosts provides a mock function with given fields: ctx, filter, pagination
func (_m *PostRepository) GetPosts(ctx context.Context, filter postpkg.PostFilter, pagination postpkg.PostPagination) ([]postpkg.Post, int64, error) {
	ret := _m.Called(ctx, filter, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 []postpkg.Post
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, postpkg.PostFilter, postpkg.PostPagination) ([]postpkg.Post, int64, error)); ok {
		return rf(ctx, filter, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postpkg.PostFilter, postpkg.PostPagination) []postpkg.Post); ok {
		r0 = rf(ctx, filter, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postpkg.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, postpkg.PostFilter, postpkg.PostPagination) int64); ok {
		r1 = rf(ctx, filter, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, postpkg.PostFilter, postpkg.PostPagination) error); ok {
		r2 = rf(ctx, filter, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPostsByAuthor provides a mock function with given fields: ctx, authorID, pagination
func (_m *PostRepository) GetPostsByAuthor(ctx context.Context, authorID primitive.ObjectID, pagination postpkg.PostPagination) ([]postpkg.Post, int64, error) {
	ret := _m.Called(ctx, authorID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsByAuthor")
	}

	var r0 []postpkg.Post
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, postpkg.PostPagination) ([]postpkg.Post, int64, error)); ok {
		return rf(ctx, authorID, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, postpkg.PostPagination) []postpkg.Post); ok {
		r0 = rf(ctx, authorID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postpkg.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, postpkg.PostPagination) int64); ok {
		r1 = rf(ctx, authorID, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, postpkg.PostPagination) error); ok {
		r2 = rf(ctx, authorID, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPostsByCategory provides a mock function with given fields: ctx, category, pagination
func (_m *PostRepository) GetPostsByCategory(ctx context.Context, category string, pagination postpkg.PostPagination) ([]postpkg.Post, int64, error) {
	ret := _m.Called(ctx, category, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsByCategory")
	}

	var r0 []postpkg.Post
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, postpkg.PostPagination) ([]postpkg.Post, int64, error)); ok {
		return rf(ctx, category, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, postpkg.PostPagination) []postpkg.Post); ok {
		r0 = rf(ctx, category, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postpkg.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, postpkg.PostPagination) int64); ok {
		r1 = rf(ctx, category, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, postpkg.PostPagination) error); ok {
		r2 = rf(ctx, category, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPostsByTag provides a mock function with given fields: ctx, tag, pagination
func (_m *PostRepository) GetPostsByTag(ctx context.Context, tag string, pagination postpkg.PostPagination) ([]postpkg.Post, int64, error) {
	ret := _m.Called(ctx, tag, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsByTag")
	}

	var r0 []postpkg.Post
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, postpkg.PostPagination) ([]postpkg.Post, int64, error)); ok {
		return rf(ctx, tag, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, postpkg.PostPagination) []postpkg.Post); ok {
		r0 = rf(ctx, tag, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postpkg.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, postpkg.PostPagination) int64); ok {
		r1 = rf(ctx, tag, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, postpkg.PostPagination) error); ok {
		r2 = rf(ctx, tag, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTrendingTags provides a mock function with given fields: ctx, limit
func (_m *PostRepository) GetTrendingTags(ctx context.Context, limit int) ([]string, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetTrendingTags")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]string, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []string); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HidePost provides a mock function with given fields: ctx, postID
func (_m *PostRepository) HidePost(ctx context.Context, postID primitive.ObjectID) error {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for HidePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrementViewCount provides a mock function with given fields: ctx, postID
func (_m *PostRepository) IncrementViewCount(ctx context.Context, postID primitive.ObjectID) error {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for IncrementViewCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsPostLikedByUser provides a mock function with given fields: ctx, postID, userID
func (_m *PostRepository) IsPostLikedByUser(ctx context.Context, postID primitive.ObjectID, userID primitive.ObjectID) (bool, error) {
	ret := _m.Called(ctx, postID, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsPostLikedByUser")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) (bool, error)); ok {
		return rf(ctx, postID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) bool); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, postID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikePost provides a mock function with given fields: ctx, postID, userID
func (_m *PostRepository) LikePost(ctx context.Context, postID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, postID, userID)

	if len(ret) == 0 {
		panic("no return value specified for LikePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportPost provides a mock function with given fields: ctx, postID
func (_m *PostRepository) ReportPost(ctx context.Context, postID primitive.ObjectID) error {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for ReportPost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchPosts provides a mock function with given fields: ctx, query, filter, pagination
func (_m *PostRepository) SearchPosts(ctx context.Context, query string, filter postpkg.PostFilter, pagination postpkg.PostPagination) ([]postpkg.Post, int64, error) {
	ret := _m.Called(ctx, query, filter, pagination)

	if len(ret) == 0 {
		panic("no return value specified for SearchPosts")
	}

	var r0 []postpkg.Post
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, postpkg.PostFilter, postpkg.PostPagination) ([]postpkg.Post, int64, error)); ok {
		return rf(ctx, query, filter, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, postpkg.PostFilter, postpkg.PostPagination) []postpkg.Post); ok {
		r0 = rf(ctx, query, filter, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postpkg.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, postpkg.PostFilter, postpkg.PostPagination) int64); ok {
		r1 = rf(ctx, query, filter, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, postpkg.PostFilter, postpkg.PostPagination) error); ok {
		r2 = rf(ctx, query, filter, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UnhidePost provides a mock function with given fields: ctx, postID
func (_m *PostRepository) UnhidePost(ctx context.Context, postID primitive.ObjectID) error {
	ret := _m.Called(ctx, postID)

	if len(ret) == 0 {
		panic("no return value specified for UnhidePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlikePost provides a mock function with given fields: ctx, postID, userID
func (_m *PostRepository) UnlikePost(ctx context.Context, postID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, postID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UnlikePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCommentsCount provides a mock function with given fields: ctx, postID, increment
func (_m *PostRepository) UpdateCommentsCount(ctx context.Context, postID primitive.ObjectID, increment int) error {
	ret := _m.Called(ctx, postID, increment)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCommentsCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, int) error); ok {
		r0 = rf(ctx, postID, increment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePost provides a mock function with given fields: ctx, id, updates
func (_m *PostRepository) UpdatePost(ctx context.Context, id primitive.ObjectID, updates postpkg.Post) (*postpkg.Post, error) {
	ret := _m.Called(ctx, id, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 *postpkg.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, postpkg.Post) (*postpkg.Post, error)); ok {
		return rf(ctx, id, updates)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, postpkg.Post) *postpkg.Post); ok {
		r0 = rf(ctx, id, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, postpkg.Post) error); ok {
		r1 = rf(ctx, id, updates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPostRepository creates a new instance of PostRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostRepository {
	mock := &PostRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
