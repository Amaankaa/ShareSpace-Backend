// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	userpkg "github.com/Amaankaa/Blog-Starter-Project/Domain/user"
	mock "github.com/stretchr/testify/mock"
)

// IJWTService is an autogenerated mock type for the IJWTService type
type IJWTService struct {
	mock.Mock
}

// GenerateToken provides a mock function with given fields: userID, username, role
func (_m *IJWTService) GenerateToken(userID string, username string, role string) (userpkg.TokenResult, error) {
	ret := _m.Called(userID, username, role)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 userpkg.TokenResult
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) (userpkg.TokenResult, error)); ok {
		return rf(userID, username, role)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) userpkg.TokenResult); ok {
		r0 = rf(userID, username, role)
	} else {
		r0 = ret.Get(0).(userpkg.TokenResult)
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(userID, username, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateToken provides a mock function with given fields: tokenString
func (_m *IJWTService) ValidateToken(tokenString string) (map[string]interface{}, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string]interface{}, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) map[string]interface{}); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIJWTService creates a new instance of IJWTService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIJWTService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IJWTService {
	mock := &IJWTService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
