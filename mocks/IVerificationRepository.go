// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	userpkg "github.com/Amaankaa/Blog-Starter-Project/Domain/user"
	mock "github.com/stretchr/testify/mock"
)

// IVerificationRepository is an autogenerated mock type for the IVerificationRepository type
type IVerificationRepository struct {
	mock.Mock
}

// DeleteVerification provides a mock function with given fields: ctx, email
func (_m *IVerificationRepository) DeleteVerification(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVerification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVerification provides a mock function with given fields: ctx, email
func (_m *IVerificationRepository) GetVerification(ctx context.Context, email string) (userpkg.Verification, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetVerification")
	}

	var r0 userpkg.Verification
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (userpkg.Verification, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) userpkg.Verification); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(userpkg.Verification)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementAttemptCount provides a mock function with given fields: ctx, email
func (_m *IVerificationRepository) IncrementAttemptCount(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for IncrementAttemptCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreVerification provides a mock function with given fields: ctx, v
func (_m *IVerificationRepository) StoreVerification(ctx context.Context, v userpkg.Verification) error {
	ret := _m.Called(ctx, v)

	if len(ret) == 0 {
		panic("no return value specified for StoreVerification")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, userpkg.Verification) error); ok {
		r0 = rf(ctx, v)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIVerificationRepository creates a new instance of IVerificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIVerificationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IVerificationRepository {
	mock := &IVerificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
