// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	postpkg "github.com/Amaankaa/Blog-Starter-Project/Domain/post"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// PostUsecase is an autogenerated mock type for the PostUsecase type
type PostUsecase struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: ctx, req, authorID
func (_m *PostUsecase) CreatePost(ctx context.Context, req postpkg.CreatePostRequest, authorID primitive.ObjectID) (*postpkg.PostResponse, error) {
	ret := _m.Called(ctx, req, authorID)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *postpkg.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postpkg.CreatePostRequest, primitive.ObjectID) (*postpkg.PostResponse, error)); ok {
		return rf(ctx, req, authorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postpkg.CreatePostRequest, primitive.ObjectID) *postpkg.PostResponse); ok {
		r0 = rf(ctx, req, authorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, postpkg.CreatePostRequest, primitive.ObjectID) error); ok {
		r1 = rf(ctx, req, authorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: ctx, id, userID
func (_m *PostUsecase) DeletePost(ctx context.Context, id primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPopularPosts provides a mock function with given fields: ctx, limit, timeframe, viewerID
func (_m *PostUsecase) GetPopularPosts(ctx context.Context, limit int, timeframe string, viewerID *primitive.ObjectID) (*postpkg.PostListResponse, error) {
	ret := _m.Called(ctx, limit, timeframe, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetPopularPosts")
	}

	var r0 *postpkg.PostListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *primitive.ObjectID) (*postpkg.PostListResponse, error)); ok {
		return rf(ctx, limit, timeframe, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *primitive.ObjectID) *postpkg.PostListResponse); ok {
		r0 = rf(ctx, limit, timeframe, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.PostListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, limit, timeframe, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPost provides a mock function with given fields: ctx, id, viewerID
func (_m *PostUsecase) GetPost(ctx context.Context, id primitive.ObjectID, viewerID *primitive.ObjectID) (*postpkg.PostResponse, error) {
	ret := _m.Called(ctx, id, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 *postpkg.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, *primitive.ObjectID) (*postpkg.PostResponse, error)); ok {
		return rf(ctx, id, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, *primitive.ObjectID) *postpkg.PostResponse); ok {
		r0 = rf(ctx, id, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, id, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostAnalytics provides a mock function with given fields: ctx, postID, userID
func (_m *PostUsecase) GetPostAnalytics(ctx context.Context, postID primitive.ObjectID, userID primitive.ObjectID) (*postpkg.PostAnalytics, error) {
	ret := _m.Called(ctx, postID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostAnalytics")
	}

	var r0 *postpkg.PostAnalytics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) (*postpkg.PostAnalytics, error)); ok {
		return rf(ctx, postID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) *postpkg.PostAnalytics); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.PostAnalytics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, postID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPosts provides a mock function with given fields: ctx, filter, pagination, viewerID
func (_m *PostUsecase) GetPosts(ctx context.Context, filter postpkg.PostFilter, pagination postpkg.PostPagination, viewerID *primitive.ObjectID) (*postpkg.PostListResponse, error) {
	ret := _m.Called(ctx, filter, pagination, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 *postpkg.PostListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, postpkg.PostFilter, postpkg.PostPagination, *primitive.ObjectID) (*postpkg.PostListResponse, error)); ok {
		return rf(ctx, filter, pagination, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, postpkg.PostFilter, postpkg.PostPagination, *primitive.ObjectID) *postpkg.PostListResponse); ok {
		r0 = rf(ctx, filter, pagination, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.PostListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, postpkg.PostFilter, postpkg.PostPagination, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, filter, pagination, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostsByCategory provides a mock function with given fields: ctx, category, pagination, viewerID
func (_m *PostUsecase) GetPostsByCategory(ctx context.Context, category string, pagination postpkg.PostPagination, viewerID *primitive.ObjectID) (*postpkg.PostListResponse, error) {
	ret := _m.Called(ctx, category, pagination, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetPostsByCategory")
	}

	var r0 *postpkg.PostListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, postpkg.PostPagination, *primitive.ObjectID) (*postpkg.PostListResponse, error)); ok {
		return rf(ctx, category, pagination, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, postpkg.PostPagination, *primitive.ObjectID) *postpkg.PostListResponse); ok {
		r0 = rf(ctx, category, pagination, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.PostListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, postpkg.PostPagination, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, category, pagination, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrendingTags provides a mock function with given fields: ctx, limit
func (_m *PostUsecase) GetTrendingTags(ctx context.Context, limit int) ([]string, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetTrendingTags")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]string, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []string); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPostStats provides a mock function with given fields: ctx, userID
func (_m *PostUsecase) GetUserPostStats(ctx context.Context, userID primitive.ObjectID) (*postpkg.UserPostStats, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPostStats")
	}

	var r0 *postpkg.UserPostStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*postpkg.UserPostStats, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *postpkg.UserPostStats); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.UserPostStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPosts provides a mock function with given fields: ctx, userID, pagination, viewerID
func (_m *PostUsecase) GetUserPosts(ctx context.Context, userID primitive.ObjectID, pagination postpkg.PostPagination, viewerID *primitive.ObjectID) (*postpkg.PostListResponse, error) {
	ret := _m.Called(ctx, userID, pagination, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPosts")
	}

	var r0 *postpkg.PostListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, postpkg.PostPagination, *primitive.ObjectID) (*postpkg.PostListResponse, error)); ok {
		return rf(ctx, userID, pagination, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, postpkg.PostPagination, *primitive.ObjectID) *postpkg.PostListResponse); ok {
		r0 = rf(ctx, userID, pagination, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.PostListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, postpkg.PostPagination, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, userID, pagination, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikePost provides a mock function with given fields: ctx, postID, userID
func (_m *PostUsecase) LikePost(ctx context.Context, postID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, postID, userID)

	if len(ret) == 0 {
		panic("no return value specified for LikePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportPost provides a mock function with given fields: ctx, postID, reporterID, reason
func (_m *PostUsecase) ReportPost(ctx context.Context, postID primitive.ObjectID, reporterID primitive.ObjectID, reason string) error {
	ret := _m.Called(ctx, postID, reporterID, reason)

	if len(ret) == 0 {
		panic("no return value specified for ReportPost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID, string) error); ok {
		r0 = rf(ctx, postID, reporterID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchPosts provides a mock function with given fields: ctx, query, filter, pagination, viewerID
func (_m *PostUsecase) SearchPosts(ctx context.Context, query string, filter postpkg.PostFilter, pagination postpkg.PostPagination, viewerID *primitive.ObjectID) (*postpkg.PostListResponse, error) {
	ret := _m.Called(ctx, query, filter, pagination, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for SearchPosts")
	}

	var r0 *postpkg.PostListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, postpkg.PostFilter, postpkg.PostPagination, *primitive.ObjectID) (*postpkg.PostListResponse, error)); ok {
		return rf(ctx, query, filter, pagination, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, postpkg.PostFilter, postpkg.PostPagination, *primitive.ObjectID) *postpkg.PostListResponse); ok {
		r0 = rf(ctx, query, filter, pagination, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.PostListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, postpkg.PostFilter, postpkg.PostPagination, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, query, filter, pagination, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnlikePost provides a mock function with given fields: ctx, postID, userID
func (_m *PostUsecase) UnlikePost(ctx context.Context, postID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, postID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UnlikePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, postID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePost provides a mock function with given fields: ctx, id, req, userID
func (_m *PostUsecase) UpdatePost(ctx context.Context, id primitive.ObjectID, req postpkg.UpdatePostRequest, userID primitive.ObjectID) (*postpkg.PostResponse, error) {
	ret := _m.Called(ctx, id, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePost")
	}

	var r0 *postpkg.PostResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, postpkg.UpdatePostRequest, primitive.ObjectID) (*postpkg.PostResponse, error)); ok {
		return rf(ctx, id, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, postpkg.UpdatePostRequest, primitive.ObjectID) *postpkg.PostResponse); ok {
		r0 = rf(ctx, id, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postpkg.PostResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, postpkg.UpdatePostRequest, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateMediaLinks provides a mock function with given fields: mediaLinks
func (_m *PostUsecase) ValidateMediaLinks(mediaLinks []postpkg.MediaLink) error {
	ret := _m.Called(mediaLinks)

	if len(ret) == 0 {
		panic("no return value specified for ValidateMediaLinks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]postpkg.MediaLink) error); ok {
		r0 = rf(mediaLinks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidatePostCategory provides a mock function with given fields: category
func (_m *PostUsecase) ValidatePostCategory(category string) error {
	ret := _m.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePostCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPostUsecase creates a new instance of PostUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostUsecase {
	mock := &PostUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
