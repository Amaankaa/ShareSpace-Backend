// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	messaging "github.com/Amaankaa/Blog-Starter-Project/Domain/messaging"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// IMessagingRepository is an autogenerated mock type for the IMessagingRepository type
type IMessagingRepository struct {
	mock.Mock
}

// CreateConversation provides a mock function with given fields: ctx, participantIDs
func (_m *IMessagingRepository) CreateConversation(ctx context.Context, participantIDs []primitive.ObjectID) (messaging.Conversation, error) {
	ret := _m.Called(ctx, participantIDs)

	if len(ret) == 0 {
		panic("no return value specified for CreateConversation")
	}

	var r0 messaging.Conversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []primitive.ObjectID) (messaging.Conversation, error)); ok {
		return rf(ctx, participantIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []primitive.ObjectID) messaging.Conversation); ok {
		r0 = rf(ctx, participantIDs)
	} else {
		r0 = ret.Get(0).(messaging.Conversation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []primitive.ObjectID) error); ok {
		r1 = rf(ctx, participantIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConversation provides a mock function with given fields: ctx, id
func (_m *IMessagingRepository) GetConversation(ctx context.Context, id primitive.ObjectID) (messaging.Conversation, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetConversation")
	}

	var r0 messaging.Conversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (messaging.Conversation, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) messaging.Conversation); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(messaging.Conversation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: ctx, conversationID, limit, offset
func (_m *IMessagingRepository) GetMessages(ctx context.Context, conversationID primitive.ObjectID, limit int, offset int) ([]messaging.Message, error) {
	ret := _m.Called(ctx, conversationID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []messaging.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, int, int) ([]messaging.Message, error)); ok {
		return rf(ctx, conversationID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, int, int) []messaging.Message); ok {
		r0 = rf(ctx, conversationID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messaging.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, int, int) error); ok {
		r1 = rf(ctx, conversationID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserConversations provides a mock function with given fields: ctx, userID, limit, offset
func (_m *IMessagingRepository) GetUserConversations(ctx context.Context, userID primitive.ObjectID, limit int, offset int) ([]messaging.Conversation, error) {
	ret := _m.Called(ctx, userID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetUserConversations")
	}

	var r0 []messaging.Conversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, int, int) ([]messaging.Conversation, error)); ok {
		return rf(ctx, userID, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, int, int) []messaging.Conversation); ok {
		r0 = rf(ctx, userID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]messaging.Conversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, int, int) error); ok {
		r1 = rf(ctx, userID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveMessage provides a mock function with given fields: ctx, msg
func (_m *IMessagingRepository) SaveMessage(ctx context.Context, msg messaging.Message) (messaging.Message, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for SaveMessage")
	}

	var r0 messaging.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, messaging.Message) (messaging.Message, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, messaging.Message) messaging.Message); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Get(0).(messaging.Message)
	}

	if rf, ok := ret.Get(1).(func(context.Context, messaging.Message) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIMessagingRepository creates a new instance of IMessagingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMessagingRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMessagingRepository {
	mock := &IMessagingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
