// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	comment "github.com/Amaankaa/Blog-Starter-Project/Domain/comment"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// ICommentRepository is an autogenerated mock type for the ICommentRepository type
type ICommentRepository struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, _a1
func (_m *ICommentRepository) CreateComment(ctx context.Context, _a1 comment.Comment) (*comment.Comment, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *comment.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, comment.Comment) (*comment.Comment, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, comment.Comment) *comment.Comment); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comment.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, comment.Comment) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: ctx, id
func (_m *ICommentRepository) DeleteComment(ctx context.Context, id primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ICommentRepository) GetByID(ctx context.Context, id primitive.ObjectID) (*comment.Comment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *comment.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*comment.Comment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *comment.Comment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comment.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsByPost provides a mock function with given fields: ctx, postID, pagination
func (_m *ICommentRepository) GetCommentsByPost(ctx context.Context, postID primitive.ObjectID, pagination comment.CommentPagination) ([]comment.Comment, int64, error) {
	ret := _m.Called(ctx, postID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsByPost")
	}

	var r0 []comment.Comment
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, comment.CommentPagination) ([]comment.Comment, int64, error)); ok {
		return rf(ctx, postID, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, comment.CommentPagination) []comment.Comment); ok {
		r0 = rf(ctx, postID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]comment.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, comment.CommentPagination) int64); ok {
		r1 = rf(ctx, postID, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, comment.CommentPagination) error); ok {
		r2 = rf(ctx, postID, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateComment provides a mock function with given fields: ctx, id, content
func (_m *ICommentRepository) UpdateComment(ctx context.Context, id primitive.ObjectID, content string) (*comment.Comment, error) {
	ret := _m.Called(ctx, id, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComment")
	}

	var r0 *comment.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) (*comment.Comment, error)); ok {
		return rf(ctx, id, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, string) *comment.Comment); ok {
		r0 = rf(ctx, id, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*comment.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, string) error); ok {
		r1 = rf(ctx, id, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICommentRepository creates a new instance of ICommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICommentRepository {
	mock := &ICommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
