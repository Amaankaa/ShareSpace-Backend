// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	resourcepkg "github.com/Amaankaa/Blog-Starter-Project/Domain/resource"
)

// ResourceUsecase is an autogenerated mock type for the ResourceUsecase type
type ResourceUsecase struct {
	mock.Mock
}

// BookmarkResource provides a mock function with given fields: ctx, resourceID, userID
func (_m *ResourceUsecase) BookmarkResource(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for BookmarkResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateResource provides a mock function with given fields: ctx, req, creatorID
func (_m *ResourceUsecase) CreateResource(ctx context.Context, req resourcepkg.CreateResourceRequest, creatorID primitive.ObjectID) (*resourcepkg.ResourceResponse, error) {
	ret := _m.Called(ctx, req, creatorID)

	if len(ret) == 0 {
		panic("no return value specified for CreateResource")
	}

	var r0 *resourcepkg.ResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.CreateResourceRequest, primitive.ObjectID) (*resourcepkg.ResourceResponse, error)); ok {
		return rf(ctx, req, creatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.CreateResourceRequest, primitive.ObjectID) *resourcepkg.ResourceResponse); ok {
		r0 = rf(ctx, req, creatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resourcepkg.CreateResourceRequest, primitive.ObjectID) error); ok {
		r1 = rf(ctx, req, creatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResource provides a mock function with given fields: ctx, id, userID
func (_m *ResourceUsecase) DeleteResource(ctx context.Context, id primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, id, userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPopularResources provides a mock function with given fields: ctx, limit, timeframe, viewerID
func (_m *ResourceUsecase) GetPopularResources(ctx context.Context, limit int, timeframe string, viewerID *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, limit, timeframe, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetPopularResources")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, limit, timeframe, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *primitive.ObjectID) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, limit, timeframe, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, limit, timeframe, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommendedResources provides a mock function with given fields: ctx, userID, limit
func (_m *ResourceUsecase) GetRecommendedResources(ctx context.Context, userID primitive.ObjectID, limit int) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, userID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetRecommendedResources")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, int) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, userID, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, int) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, userID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, int) error); ok {
		r1 = rf(ctx, userID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResource provides a mock function with given fields: ctx, id, viewerID
func (_m *ResourceUsecase) GetResource(ctx context.Context, id primitive.ObjectID, viewerID *primitive.ObjectID) (*resourcepkg.ResourceResponse, error) {
	ret := _m.Called(ctx, id, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetResource")
	}

	var r0 *resourcepkg.ResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, *primitive.ObjectID) (*resourcepkg.ResourceResponse, error)); ok {
		return rf(ctx, id, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, *primitive.ObjectID) *resourcepkg.ResourceResponse); ok {
		r0 = rf(ctx, id, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, id, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceAnalytics provides a mock function with given fields: ctx, resourceID, userID
func (_m *ResourceUsecase) GetResourceAnalytics(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID) (*resourcepkg.ResourceAnalytics, error) {
	ret := _m.Called(ctx, resourceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceAnalytics")
	}

	var r0 *resourcepkg.ResourceAnalytics
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) (*resourcepkg.ResourceAnalytics, error)); ok {
		return rf(ctx, resourceID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) *resourcepkg.ResourceAnalytics); ok {
		r0 = rf(ctx, resourceID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceAnalytics)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, resourceID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResources provides a mock function with given fields: ctx, filter, pagination, viewerID
func (_m *ResourceUsecase) GetResources(ctx context.Context, filter resourcepkg.ResourceFilter, pagination resourcepkg.ResourcePagination, viewerID *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, filter, pagination, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination, *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, filter, pagination, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination, *primitive.ObjectID) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, filter, pagination, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, filter, pagination, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcesByCategory provides a mock function with given fields: ctx, category, pagination, viewerID
func (_m *ResourceUsecase) GetResourcesByCategory(ctx context.Context, category string, pagination resourcepkg.ResourcePagination, viewerID *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, category, pagination, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesByCategory")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourcePagination, *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, category, pagination, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourcePagination, *primitive.ObjectID) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, category, pagination, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, resourcepkg.ResourcePagination, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, category, pagination, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcesByType provides a mock function with given fields: ctx, resourceType, pagination, viewerID
func (_m *ResourceUsecase) GetResourcesByType(ctx context.Context, resourceType string, pagination resourcepkg.ResourcePagination, viewerID *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, resourceType, pagination, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesByType")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourcePagination, *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, resourceType, pagination, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourcePagination, *primitive.ObjectID) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, resourceType, pagination, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, resourcepkg.ResourcePagination, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, resourceType, pagination, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcesWithDeadlines provides a mock function with given fields: ctx, pagination, viewerID
func (_m *ResourceUsecase) GetResourcesWithDeadlines(ctx context.Context, pagination resourcepkg.ResourcePagination, viewerID *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, pagination, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesWithDeadlines")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.ResourcePagination, *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, pagination, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.ResourcePagination, *primitive.ObjectID) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, pagination, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resourcepkg.ResourcePagination, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, pagination, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopRatedResources provides a mock function with given fields: ctx, limit, category, viewerID
func (_m *ResourceUsecase) GetTopRatedResources(ctx context.Context, limit int, category string, viewerID *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, limit, category, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetTopRatedResources")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, limit, category, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string, *primitive.ObjectID) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, limit, category, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, limit, category, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrendingResources provides a mock function with given fields: ctx, limit, viewerID
func (_m *ResourceUsecase) GetTrendingResources(ctx context.Context, limit int, viewerID *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, limit, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetTrendingResources")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, limit, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, *primitive.ObjectID) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, limit, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, limit, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpcomingOpportunities provides a mock function with given fields: ctx, days, pagination, viewerID
func (_m *ResourceUsecase) GetUpcomingOpportunities(ctx context.Context, days int, pagination resourcepkg.ResourcePagination, viewerID *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, days, pagination, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetUpcomingOpportunities")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, resourcepkg.ResourcePagination, *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, days, pagination, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, resourcepkg.ResourcePagination, *primitive.ObjectID) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, days, pagination, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, resourcepkg.ResourcePagination, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, days, pagination, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBookmarkedResources provides a mock function with given fields: ctx, userID, pagination
func (_m *ResourceUsecase) GetUserBookmarkedResources(ctx context.Context, userID primitive.ObjectID, pagination resourcepkg.ResourcePagination) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, userID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBookmarkedResources")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, userID, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, userID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) error); ok {
		r1 = rf(ctx, userID, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserLikedResources provides a mock function with given fields: ctx, userID, pagination
func (_m *ResourceUsecase) GetUserLikedResources(ctx context.Context, userID primitive.ObjectID, pagination resourcepkg.ResourcePagination) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, userID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetUserLikedResources")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, userID, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, userID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) error); ok {
		r1 = rf(ctx, userID, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserResourceStats provides a mock function with given fields: ctx, userID
func (_m *ResourceUsecase) GetUserResourceStats(ctx context.Context, userID primitive.ObjectID) (*resourcepkg.UserResourceStats, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserResourceStats")
	}

	var r0 *resourcepkg.UserResourceStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*resourcepkg.UserResourceStats, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *resourcepkg.UserResourceStats); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.UserResourceStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserResources provides a mock function with given fields: ctx, userID, pagination, viewerID
func (_m *ResourceUsecase) GetUserResources(ctx context.Context, userID primitive.ObjectID, pagination resourcepkg.ResourcePagination, viewerID *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, userID, pagination, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserResources")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination, *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, userID, pagination, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination, *primitive.ObjectID) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, userID, pagination, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, userID, pagination, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeResource provides a mock function with given fields: ctx, resourceID, userID
func (_m *ResourceUsecase) LikeResource(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for LikeResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RateResource provides a mock function with given fields: ctx, resourceID, userID, rating
func (_m *ResourceUsecase) RateResource(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID, rating float64) error {
	ret := _m.Called(ctx, resourceID, userID, rating)

	if len(ret) == 0 {
		panic("no return value specified for RateResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID, float64) error); ok {
		r0 = rf(ctx, resourceID, userID, rating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportResource provides a mock function with given fields: ctx, resourceID, reporterID, reason
func (_m *ResourceUsecase) ReportResource(ctx context.Context, resourceID primitive.ObjectID, reporterID primitive.ObjectID, reason string) error {
	ret := _m.Called(ctx, resourceID, reporterID, reason)

	if len(ret) == 0 {
		panic("no return value specified for ReportResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID, string) error); ok {
		r0 = rf(ctx, resourceID, reporterID, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchResources provides a mock function with given fields: ctx, query, filter, pagination, viewerID
func (_m *ResourceUsecase) SearchResources(ctx context.Context, query string, filter resourcepkg.ResourceFilter, pagination resourcepkg.ResourcePagination, viewerID *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error) {
	ret := _m.Called(ctx, query, filter, pagination, viewerID)

	if len(ret) == 0 {
		panic("no return value specified for SearchResources")
	}

	var r0 *resourcepkg.ResourceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination, *primitive.ObjectID) (*resourcepkg.ResourceListResponse, error)); ok {
		return rf(ctx, query, filter, pagination, viewerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination, *primitive.ObjectID) *resourcepkg.ResourceListResponse); ok {
		r0 = rf(ctx, query, filter, pagination, viewerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination, *primitive.ObjectID) error); ok {
		r1 = rf(ctx, query, filter, pagination, viewerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnbookmarkResource provides a mock function with given fields: ctx, resourceID, userID
func (_m *ResourceUsecase) UnbookmarkResource(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UnbookmarkResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlikeResource provides a mock function with given fields: ctx, resourceID, userID
func (_m *ResourceUsecase) UnlikeResource(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UnlikeResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateResource provides a mock function with given fields: ctx, id, req, userID
func (_m *ResourceUsecase) UpdateResource(ctx context.Context, id primitive.ObjectID, req resourcepkg.UpdateResourceRequest, userID primitive.ObjectID) (*resourcepkg.ResourceResponse, error) {
	ret := _m.Called(ctx, id, req, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResource")
	}

	var r0 *resourcepkg.ResourceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.UpdateResourceRequest, primitive.ObjectID) (*resourcepkg.ResourceResponse, error)); ok {
		return rf(ctx, id, req, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.UpdateResourceRequest, primitive.ObjectID) *resourcepkg.ResourceResponse); ok {
		r0 = rf(ctx, id, req, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, resourcepkg.UpdateResourceRequest, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id, req, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateAttachments provides a mock function with given fields: attachments
func (_m *ResourceUsecase) ValidateAttachments(attachments []resourcepkg.Attachment) error {
	ret := _m.Called(attachments)

	if len(ret) == 0 {
		panic("no return value specified for ValidateAttachments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]resourcepkg.Attachment) error); ok {
		r0 = rf(attachments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateDifficulty provides a mock function with given fields: difficulty
func (_m *ResourceUsecase) ValidateDifficulty(difficulty string) error {
	ret := _m.Called(difficulty)

	if len(ret) == 0 {
		panic("no return value specified for ValidateDifficulty")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(difficulty)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateResourceCategory provides a mock function with given fields: category
func (_m *ResourceUsecase) ValidateResourceCategory(category string) error {
	ret := _m.Called(category)

	if len(ret) == 0 {
		panic("no return value specified for ValidateResourceCategory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateResourceType provides a mock function with given fields: resourceType
func (_m *ResourceUsecase) ValidateResourceType(resourceType string) error {
	ret := _m.Called(resourceType)

	if len(ret) == 0 {
		panic("no return value specified for ValidateResourceType")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(resourceType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyResource provides a mock function with given fields: ctx, resourceID, verifierID
func (_m *ResourceUsecase) VerifyResource(ctx context.Context, resourceID primitive.ObjectID, verifierID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID, verifierID)

	if len(ret) == 0 {
		panic("no return value specified for VerifyResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID, verifierID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewResourceUsecase creates a new instance of ResourceUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceUsecase {
	mock := &ResourceUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
