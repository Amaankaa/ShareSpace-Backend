// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	resourcepkg "github.com/Amaankaa/Blog-Starter-Project/Domain/resource"
)

// ResourceRepository is an autogenerated mock type for the ResourceRepository type
type ResourceRepository struct {
	mock.Mock
}

// BookmarkResource provides a mock function with given fields: ctx, resourceID, userID
func (_m *ResourceRepository) BookmarkResource(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for BookmarkResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateResource provides a mock function with given fields: ctx, resource
func (_m *ResourceRepository) CreateResource(ctx context.Context, resource resourcepkg.Resource) (*resourcepkg.Resource, error) {
	ret := _m.Called(ctx, resource)

	if len(ret) == 0 {
		panic("no return value specified for CreateResource")
	}

	var r0 *resourcepkg.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.Resource) (*resourcepkg.Resource, error)); ok {
		return rf(ctx, resource)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.Resource) *resourcepkg.Resource); ok {
		r0 = rf(ctx, resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resourcepkg.Resource) error); ok {
		r1 = rf(ctx, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResource provides a mock function with given fields: ctx, id
func (_m *ResourceRepository) DeleteResource(ctx context.Context, id primitive.ObjectID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetExpiredResources provides a mock function with given fields: ctx, pagination
func (_m *ResourceRepository) GetExpiredResources(ctx context.Context, pagination resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetExpiredResources")
	}

	var r0 []resourcepkg.Resource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.ResourcePagination) []resourcepkg.Resource); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resourcepkg.ResourcePagination) int64); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, resourcepkg.ResourcePagination) error); ok {
		r2 = rf(ctx, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPopularResources provides a mock function with given fields: ctx, limit, timeframe
func (_m *ResourceRepository) GetPopularResources(ctx context.Context, limit int, timeframe string) ([]resourcepkg.Resource, error) {
	ret := _m.Called(ctx, limit, timeframe)

	if len(ret) == 0 {
		panic("no return value specified for GetPopularResources")
	}

	var r0 []resourcepkg.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) ([]resourcepkg.Resource, error)); ok {
		return rf(ctx, limit, timeframe)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []resourcepkg.Resource); ok {
		r0 = rf(ctx, limit, timeframe)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, limit, timeframe)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceByID provides a mock function with given fields: ctx, id
func (_m *ResourceRepository) GetResourceByID(ctx context.Context, id primitive.ObjectID) (*resourcepkg.Resource, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceByID")
	}

	var r0 *resourcepkg.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*resourcepkg.Resource, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *resourcepkg.Resource); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceRating provides a mock function with given fields: ctx, resourceID
func (_m *ResourceRepository) GetResourceRating(ctx context.Context, resourceID primitive.ObjectID) (float64, int, error) {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceRating")
	}

	var r0 float64
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (float64, int, error)); ok {
		return rf(ctx, resourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) float64); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) int); ok {
		r1 = rf(ctx, resourceID)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID) error); ok {
		r2 = rf(ctx, resourceID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetResourceStats provides a mock function with given fields: ctx, resourceID
func (_m *ResourceRepository) GetResourceStats(ctx context.Context, resourceID primitive.ObjectID) (*resourcepkg.ResourceStats, error) {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceStats")
	}

	var r0 *resourcepkg.ResourceStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*resourcepkg.ResourceStats, error)); ok {
		return rf(ctx, resourceID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *resourcepkg.ResourceStats); ok {
		r0 = rf(ctx, resourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.ResourceStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, resourceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResources provides a mock function with given fields: ctx, filter, pagination
func (_m *ResourceRepository) GetResources(ctx context.Context, filter resourcepkg.ResourceFilter, pagination resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error) {
	ret := _m.Called(ctx, filter, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 []resourcepkg.Resource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error)); ok {
		return rf(ctx, filter, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination) []resourcepkg.Resource); ok {
		r0 = rf(ctx, filter, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination) int64); ok {
		r1 = rf(ctx, filter, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination) error); ok {
		r2 = rf(ctx, filter, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetResourcesByCategory provides a mock function with given fields: ctx, category, pagination
func (_m *ResourceRepository) GetResourcesByCategory(ctx context.Context, category string, pagination resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error) {
	ret := _m.Called(ctx, category, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesByCategory")
	}

	var r0 []resourcepkg.Resource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error)); ok {
		return rf(ctx, category, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourcePagination) []resourcepkg.Resource); ok {
		r0 = rf(ctx, category, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, resourcepkg.ResourcePagination) int64); ok {
		r1 = rf(ctx, category, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, resourcepkg.ResourcePagination) error); ok {
		r2 = rf(ctx, category, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetResourcesByCreator provides a mock function with given fields: ctx, creatorID, pagination
func (_m *ResourceRepository) GetResourcesByCreator(ctx context.Context, creatorID primitive.ObjectID, pagination resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error) {
	ret := _m.Called(ctx, creatorID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesByCreator")
	}

	var r0 []resourcepkg.Resource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error)); ok {
		return rf(ctx, creatorID, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) []resourcepkg.Resource); ok {
		r0 = rf(ctx, creatorID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) int64); ok {
		r1 = rf(ctx, creatorID, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) error); ok {
		r2 = rf(ctx, creatorID, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetResourcesByTag provides a mock function with given fields: ctx, tag, pagination
func (_m *ResourceRepository) GetResourcesByTag(ctx context.Context, tag string, pagination resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error) {
	ret := _m.Called(ctx, tag, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesByTag")
	}

	var r0 []resourcepkg.Resource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error)); ok {
		return rf(ctx, tag, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourcePagination) []resourcepkg.Resource); ok {
		r0 = rf(ctx, tag, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, resourcepkg.ResourcePagination) int64); ok {
		r1 = rf(ctx, tag, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, resourcepkg.ResourcePagination) error); ok {
		r2 = rf(ctx, tag, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetResourcesByType provides a mock function with given fields: ctx, resourceType, pagination
func (_m *ResourceRepository) GetResourcesByType(ctx context.Context, resourceType string, pagination resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error) {
	ret := _m.Called(ctx, resourceType, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesByType")
	}

	var r0 []resourcepkg.Resource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error)); ok {
		return rf(ctx, resourceType, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourcePagination) []resourcepkg.Resource); ok {
		r0 = rf(ctx, resourceType, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, resourcepkg.ResourcePagination) int64); ok {
		r1 = rf(ctx, resourceType, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, resourcepkg.ResourcePagination) error); ok {
		r2 = rf(ctx, resourceType, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetResourcesWithUpcomingDeadlines provides a mock function with given fields: ctx, days, pagination
func (_m *ResourceRepository) GetResourcesWithUpcomingDeadlines(ctx context.Context, days int, pagination resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error) {
	ret := _m.Called(ctx, days, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesWithUpcomingDeadlines")
	}

	var r0 []resourcepkg.Resource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error)); ok {
		return rf(ctx, days, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, resourcepkg.ResourcePagination) []resourcepkg.Resource); ok {
		r0 = rf(ctx, days, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, resourcepkg.ResourcePagination) int64); ok {
		r1 = rf(ctx, days, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, resourcepkg.ResourcePagination) error); ok {
		r2 = rf(ctx, days, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTopRatedResources provides a mock function with given fields: ctx, limit, category
func (_m *ResourceRepository) GetTopRatedResources(ctx context.Context, limit int, category string) ([]resourcepkg.Resource, error) {
	ret := _m.Called(ctx, limit, category)

	if len(ret) == 0 {
		panic("no return value specified for GetTopRatedResources")
	}

	var r0 []resourcepkg.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) ([]resourcepkg.Resource, error)); ok {
		return rf(ctx, limit, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) []resourcepkg.Resource); ok {
		r0 = rf(ctx, limit, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, limit, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrendingResources provides a mock function with given fields: ctx, limit
func (_m *ResourceRepository) GetTrendingResources(ctx context.Context, limit int) ([]resourcepkg.Resource, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetTrendingResources")
	}

	var r0 []resourcepkg.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]resourcepkg.Resource, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []resourcepkg.Resource); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnverifiedResources provides a mock function with given fields: ctx, pagination
func (_m *ResourceRepository) GetUnverifiedResources(ctx context.Context, pagination resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error) {
	ret := _m.Called(ctx, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetUnverifiedResources")
	}

	var r0 []resourcepkg.Resource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, resourcepkg.ResourcePagination) []resourcepkg.Resource); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, resourcepkg.ResourcePagination) int64); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, resourcepkg.ResourcePagination) error); ok {
		r2 = rf(ctx, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserBookmarkedResources provides a mock function with given fields: ctx, userID, pagination
func (_m *ResourceRepository) GetUserBookmarkedResources(ctx context.Context, userID primitive.ObjectID, pagination resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error) {
	ret := _m.Called(ctx, userID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBookmarkedResources")
	}

	var r0 []resourcepkg.Resource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error)); ok {
		return rf(ctx, userID, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) []resourcepkg.Resource); ok {
		r0 = rf(ctx, userID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) int64); ok {
		r1 = rf(ctx, userID, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) error); ok {
		r2 = rf(ctx, userID, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserLikedResources provides a mock function with given fields: ctx, userID, pagination
func (_m *ResourceRepository) GetUserLikedResources(ctx context.Context, userID primitive.ObjectID, pagination resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error) {
	ret := _m.Called(ctx, userID, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetUserLikedResources")
	}

	var r0 []resourcepkg.Resource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error)); ok {
		return rf(ctx, userID, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) []resourcepkg.Resource); ok {
		r0 = rf(ctx, userID, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) int64); ok {
		r1 = rf(ctx, userID, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, primitive.ObjectID, resourcepkg.ResourcePagination) error); ok {
		r2 = rf(ctx, userID, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserRatingForResource provides a mock function with given fields: ctx, resourceID, userID
func (_m *ResourceRepository) GetUserRatingForResource(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID) (float64, error) {
	ret := _m.Called(ctx, resourceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRatingForResource")
	}

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) (float64, error)); ok {
		return rf(ctx, resourceID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) float64); ok {
		r0 = rf(ctx, resourceID, userID)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, resourceID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HideResource provides a mock function with given fields: ctx, resourceID
func (_m *ResourceRepository) HideResource(ctx context.Context, resourceID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for HideResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrementShareCount provides a mock function with given fields: ctx, resourceID
func (_m *ResourceRepository) IncrementShareCount(ctx context.Context, resourceID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for IncrementShareCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncrementViewCount provides a mock function with given fields: ctx, resourceID
func (_m *ResourceRepository) IncrementViewCount(ctx context.Context, resourceID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for IncrementViewCount")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsResourceBookmarkedByUser provides a mock function with given fields: ctx, resourceID, userID
func (_m *ResourceRepository) IsResourceBookmarkedByUser(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID) (bool, error) {
	ret := _m.Called(ctx, resourceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsResourceBookmarkedByUser")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) (bool, error)); ok {
		return rf(ctx, resourceID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) bool); ok {
		r0 = rf(ctx, resourceID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, resourceID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsResourceLikedByUser provides a mock function with given fields: ctx, resourceID, userID
func (_m *ResourceRepository) IsResourceLikedByUser(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID) (bool, error) {
	ret := _m.Called(ctx, resourceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for IsResourceLikedByUser")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) (bool, error)); ok {
		return rf(ctx, resourceID, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) bool); ok {
		r0 = rf(ctx, resourceID, userID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, resourceID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeResource provides a mock function with given fields: ctx, resourceID, userID
func (_m *ResourceRepository) LikeResource(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for LikeResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RateResource provides a mock function with given fields: ctx, resourceID, userID, rating
func (_m *ResourceRepository) RateResource(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID, rating float64) error {
	ret := _m.Called(ctx, resourceID, userID, rating)

	if len(ret) == 0 {
		panic("no return value specified for RateResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID, float64) error); ok {
		r0 = rf(ctx, resourceID, userID, rating)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportResource provides a mock function with given fields: ctx, resourceID
func (_m *ResourceRepository) ReportResource(ctx context.Context, resourceID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for ReportResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchResources provides a mock function with given fields: ctx, query, filter, pagination
func (_m *ResourceRepository) SearchResources(ctx context.Context, query string, filter resourcepkg.ResourceFilter, pagination resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error) {
	ret := _m.Called(ctx, query, filter, pagination)

	if len(ret) == 0 {
		panic("no return value specified for SearchResources")
	}

	var r0 []resourcepkg.Resource
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination) ([]resourcepkg.Resource, int64, error)); ok {
		return rf(ctx, query, filter, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination) []resourcepkg.Resource); ok {
		r0 = rf(ctx, query, filter, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination) int64); ok {
		r1 = rf(ctx, query, filter, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, resourcepkg.ResourceFilter, resourcepkg.ResourcePagination) error); ok {
		r2 = rf(ctx, query, filter, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UnbookmarkResource provides a mock function with given fields: ctx, resourceID, userID
func (_m *ResourceRepository) UnbookmarkResource(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UnbookmarkResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnhideResource provides a mock function with given fields: ctx, resourceID
func (_m *ResourceRepository) UnhideResource(ctx context.Context, resourceID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for UnhideResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnlikeResource provides a mock function with given fields: ctx, resourceID, userID
func (_m *ResourceRepository) UnlikeResource(ctx context.Context, resourceID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UnlikeResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnverifyResource provides a mock function with given fields: ctx, resourceID
func (_m *ResourceRepository) UnverifyResource(ctx context.Context, resourceID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID)

	if len(ret) == 0 {
		panic("no return value specified for UnverifyResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateResource provides a mock function with given fields: ctx, id, updates
func (_m *ResourceRepository) UpdateResource(ctx context.Context, id primitive.ObjectID, updates resourcepkg.Resource) (*resourcepkg.Resource, error) {
	ret := _m.Called(ctx, id, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResource")
	}

	var r0 *resourcepkg.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.Resource) (*resourcepkg.Resource, error)); ok {
		return rf(ctx, id, updates)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, resourcepkg.Resource) *resourcepkg.Resource); ok {
		r0 = rf(ctx, id, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcepkg.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, resourcepkg.Resource) error); ok {
		r1 = rf(ctx, id, updates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyResource provides a mock function with given fields: ctx, resourceID, verifierID
func (_m *ResourceRepository) VerifyResource(ctx context.Context, resourceID primitive.ObjectID, verifierID primitive.ObjectID) error {
	ret := _m.Called(ctx, resourceID, verifierID)

	if len(ret) == 0 {
		panic("no return value specified for VerifyResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, resourceID, verifierID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewResourceRepository creates a new instance of ResourceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceRepository {
	mock := &ResourceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
