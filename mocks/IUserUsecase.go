// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"

	userpkg "github.com/Amaankaa/Blog-Starter-Project/Domain/user"
)

// IUserUsecase is an autogenerated mock type for the IUserUsecase type
type IUserUsecase struct {
	mock.Mock
}

// DemoteUser provides a mock function with given fields: ctx, targetUserID, actorUserID
func (_m *IUserUsecase) DemoteUser(ctx context.Context, targetUserID string, actorUserID string) error {
	ret := _m.Called(ctx, targetUserID, actorUserID)

	if len(ret) == 0 {
		panic("no return value specified for DemoteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, targetUserID, actorUserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserProfile provides a mock function with given fields: ctx, userID
func (_m *IUserUsecase) GetUserProfile(ctx context.Context, userID string) (userpkg.User, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfile")
	}

	var r0 userpkg.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (userpkg.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) userpkg.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(userpkg.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, login, password
func (_m *IUserUsecase) LoginUser(ctx context.Context, login string, password string) (userpkg.User, string, string, error) {
	ret := _m.Called(ctx, login, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 userpkg.User
	var r1 string
	var r2 string
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (userpkg.User, string, string, error)); ok {
		return rf(ctx, login, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) userpkg.User); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Get(0).(userpkg.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) string); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) string); ok {
		r2 = rf(ctx, login, password)
	} else {
		r2 = ret.Get(2).(string)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, string) error); ok {
		r3 = rf(ctx, login, password)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// Logout provides a mock function with given fields: ctx, userID
func (_m *IUserUsecase) Logout(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PromoteUser provides a mock function with given fields: ctx, targetUserID, actorUserID
func (_m *IUserUsecase) PromoteUser(ctx context.Context, targetUserID string, actorUserID string) error {
	ret := _m.Called(ctx, targetUserID, actorUserID)

	if len(ret) == 0 {
		panic("no return value specified for PromoteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, targetUserID, actorUserID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *IUserUsecase) RefreshToken(ctx context.Context, refreshToken string) (userpkg.TokenResult, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 userpkg.TokenResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (userpkg.TokenResult, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) userpkg.TokenResult); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(userpkg.TokenResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *IUserUsecase) RegisterUser(ctx context.Context, user userpkg.User) (userpkg.User, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 userpkg.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, userpkg.User) (userpkg.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, userpkg.User) userpkg.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(userpkg.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, userpkg.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, email, newPassword
func (_m *IUserUsecase) ResetPassword(ctx context.Context, email string, newPassword string) error {
	ret := _m.Called(ctx, email, newPassword)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, newPassword)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendResetOTP provides a mock function with given fields: ctx, email
func (_m *IUserUsecase) SendResetOTP(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for SendResetOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendVerificationOTP provides a mock function with given fields: ctx, email
func (_m *IUserUsecase) SendVerificationOTP(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for SendVerificationOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProfile provides a mock function with given fields: ctx, userID, updates, file, filename
func (_m *IUserUsecase) UpdateProfile(ctx context.Context, userID string, updates userpkg.UpdateProfileRequest, file multipart.File, filename string) (userpkg.User, error) {
	ret := _m.Called(ctx, userID, updates, file, filename)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 userpkg.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, userpkg.UpdateProfileRequest, multipart.File, string) (userpkg.User, error)); ok {
		return rf(ctx, userID, updates, file, filename)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, userpkg.UpdateProfileRequest, multipart.File, string) userpkg.User); ok {
		r0 = rf(ctx, userID, updates, file, filename)
	} else {
		r0 = ret.Get(0).(userpkg.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, userpkg.UpdateProfileRequest, multipart.File, string) error); ok {
		r1 = rf(ctx, userID, updates, file, filename)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyOTP provides a mock function with given fields: ctx, email, otp
func (_m *IUserUsecase) VerifyOTP(ctx context.Context, email string, otp string) error {
	ret := _m.Called(ctx, email, otp)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTP")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyUser provides a mock function with given fields: ctx, email, otp
func (_m *IUserUsecase) VerifyUser(ctx context.Context, email string, otp string) error {
	ret := _m.Called(ctx, email, otp)

	if len(ret) == 0 {
		panic("no return value specified for VerifyUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, otp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIUserUsecase creates a new instance of IUserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserUsecase {
	mock := &IUserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
